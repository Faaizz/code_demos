// Code generated by mockery v2.20.0. DO NOT EDIT.

package handle_test

import (
	model "github.com/faaizz/code_demos/go_books_api/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIController is an autogenerated mock type for the IController type
type MockIController struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: title, author, year
func (_m *MockIController) CreateBook(title string, author string, year int) (model.Book, error) {
	ret := _m.Called(title, author, year)

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (model.Book, error)); ok {
		return rf(title, author, year)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) model.Book); ok {
		r0 = rf(title, author, year)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(title, author, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: id
func (_m *MockIController) DeleteBook(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBooks provides a mock function with given fields:
func (_m *MockIController) GetBooks() ([]model.Book, error) {
	ret := _m.Called()

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadBook provides a mock function with given fields: id
func (_m *MockIController) ReadBook(id uint) (model.Book, error) {
	ret := _m.Called(id)

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (model.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) model.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: id, title, author, year
func (_m *MockIController) UpdateBook(id uint, title string, author string, year int) (model.Book, error) {
	ret := _m.Called(id, title, author, year)

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string, int) (model.Book, error)); ok {
		return rf(id, title, author, year)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string, int) model.Book); ok {
		r0 = rf(id, title, author, year)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string, int) error); ok {
		r1 = rf(id, title, author, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIController interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIController creates a new instance of MockIController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIController(t mockConstructorTestingTNewMockIController) *MockIController {
	mock := &MockIController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
